#!/usr/bin/env bash

function aws-profile() {
  local cmd="$1"
  shift

  local aws_config_file="${AWS_CONFIG_FILE:-$HOME/.aws/config}"

  if ! [[ -f $aws_config_file ]]; then
    echo "Error: AWS_CONFIG_FILE ($aws_config_file) does not exist, no profiles available." 1>&2
    return 1
  fi

  declare -a profiles=(default)
  readarray -t explicit_profiles < <(grep '\[profile' "$aws_config_file" | tr -d '[]' | awk '{print $2}')
  profiles+=("${explicit_profiles[@]}")

  case $cmd in
    "get"|"")

      echo "${#profiles[@]} profiles"
      for profile in "${profiles[@]}"; do
        if [[ "${profile}" == "${AWS_PROFILE:-default}" ]]; then
          echo "* ${profile}"
          :
        else
          echo "  ${profile}"
          :
        fi
      done
    ;;
    "set")

      declare newprofile
      if [[ -n "$1" ]] && ! [[ $1 =~ '--' ]]; then
        shift
        newprofile="$1"
      else
        newprofile="$(printf "%s\n" "${profiles[@]}" | fzf --preview="aws configure list --profile {}")"
        if [[ $? -ne 0 ]]; then
          # Treat fzf error as no profile selected
          return 0
        fi
      fi

      if [[ $newprofile == "default" ]]; then
        unset AWS_PROFILE
      else
        export AWS_PROFILE="$newprofile"
      fi
      echo "Profile set to '${newprofile}'"

      if [[ $1 == '--login' ]]; then
        if ! aws configure get aws_access_key_id 1>/dev/null; then
          aws sso login
        else
          echo "AWS profile $AWS_PROFILE already logged in, skipping login"
        fi
      fi
      ;;
    *)
      echo "Error: unknown command $cmd" 1>&2
      echo "Usage: ${BASH_SOURCE[0]} [set|get]" 1>&2
      return 1
      ;;
  esac
}